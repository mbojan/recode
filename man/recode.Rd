% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/recode.R
\name{recode}
\alias{recode}
\alias{recode.default}
\alias{recode.data.frame}
\alias{recode.matrix}
\alias{recode.formula}
\title{Recoding variables (vectors)}
\usage{
recode(x, fromto, ...)

\method{recode}{default}(x, fromto, ...)

\method{recode}{data.frame}(x, fromto, ...)

\method{recode}{matrix}(x, fromto, ...)

\method{recode}{formula}(x, fromto, ..., other = NULL)
}
\arguments{
\item{x}{atomic vector, variable to be recoded}

\item{fromto}{two-column matrix or data frame, or a list}

\item{...}{Only used in the default method and expects further elements of
the recoding rule set}

\item{other}{value insert for other unrecoded values}
}
\value{
Vector of the same mode as second column of \code{fromto} and length
as \code{x} with the values recoded.
}
\description{
Transform the input vector into a new vector by replacing old values with
new values according to the specified rules.
}
\details{
This is a generic function that dispatches methods based on the class
of the \code{fromto} argument, which expects the recoding rule(s).

If \code{fromto} is a vector it should have an even number of elements. It is
interpreted such that values \code{x = fromto[i]} is recoded into a value
\code{fromto[i+1]}, \code{x = fromto[i+2]} into \code{fromto[i+3]} and so on.

If \code{fromto} is a data frame, then it is expected to have two columns.
The mode of the result is determined by the mode of the second column of
\code{fromto}. For each 'i', values of \code{x} equal to \code{fromto[i,1]}
are replaced with \code{fromto[i,2]}.

If \code{fromto} is a matrix, it is converted to a data frame and an
appropriate method is used.
}
\examples{
# Input vector
x <- c(1,2,3,4,3,2,1)

# Recoding with rules as a matrix
rmat <- matrix( c(1, 10, 4, 40), 2, 2, byrow=TRUE)
data.frame(
  old=x,
  new=recode(x, rmat)
)

# Recoding with a data frame
d <- data.frame(from = c(2, 3),
                to = c("two", "three") )
data.frame(
  old = x,
  new = recode(x, d)
)



# Recoding with rule sets
r <- recode(x,
            c(1,2), "one or two",
            c(3,4), "three or four",
            5, "five")
data.frame(old=x, new=r)
}
\seealso{
\code{\link{match}}
}
